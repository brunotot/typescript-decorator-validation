/// <reference types="react" />
import { Class, Errors, ValidationGroup } from "tdv-core";
type ChangeHandlerCache<T> = {
    [K in keyof T]: (value: T[K]) => void;
};
export type FormConfig<TClass, TBody = TClass> = {
    defaultValue?: TBody;
    validationGroups?: ValidationGroup[];
    validateImmediately?: boolean;
    standalone?: boolean;
    onSubmit?: () => Promise<void> | void;
    onSubmitValidationFail?: (errors: Errors<TClass>) => void;
    whenChanged?: () => void;
};
type ChangeHandlerValue<T, K extends keyof T> = T[K] | ((prev: T[K]) => T[K]);
export type ChangeHandler<T> = <K extends keyof T>(key: K, value: ChangeHandlerValue<T, K>) => void;
export default function useForm<TClass, TBody = TClass>(model: Class<TClass>, config?: FormConfig<TClass, TBody>): readonly [TBody, import("react").Dispatch<import("react").SetStateAction<TBody>>, {
    readonly isValid: boolean;
    readonly isSubmitted: boolean;
    readonly cachedHandlers: ChangeHandlerCache<TBody>;
    readonly onSubmit: () => Promise<void>;
    readonly handleChange: ChangeHandler<TBody>;
    readonly providerProps: {
        submitted: boolean;
        setSubmitted: (bool: boolean) => void;
        validateImmediately: boolean;
    };
    readonly errors: Errors<TClass>;
}];
export {};
