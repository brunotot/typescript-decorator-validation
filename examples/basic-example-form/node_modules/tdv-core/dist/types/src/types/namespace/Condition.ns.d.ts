import { TypeGroup } from "./TypeGroup.ns";
type _isAnyOf<TCheck, TPossibilities extends TypeGroup.Array> = NonNullable<TCheck> extends TPossibilities[number] ? true : false;
export declare namespace Condition {
    type isAnyOf<TCheck, TData extends TypeGroup.Array> = _isAnyOf<TCheck, TData>;
    type isObject<T> = NonNullable<T> extends TypeGroup.Object ? true : false;
    type isFunction<T> = NonNullable<T> extends TypeGroup.Function ? true : false;
    type isArray<T> = NonNullable<T> extends TypeGroup.Array ? true : false;
    type isPrimitive<T> = isAnyOf<T, TypeGroup.Primitive>;
    type isUndefined<T> = T extends undefined ? true : false;
}
export {};
