import { ValidationGroup } from "../../decorators/types/DecoratorProps.type";
import { Class } from "../../types/Class.type";
import { DetailedErrors } from "../../types/DetailedErrors.type";
import { EntityProcessorCache, EntityProcessorResult } from "../../types/EntityProcessor.type";
import { Errors } from "../../types/Errors.type";
import { Payload } from "../../types/Payload.type";
import ClassMetadata from "../metadata/ClassMetadata";
export default class EntityProcessor<T> {
    #private;
    get metadata(): ClassMetadata<T>;
    get cache(): EntityProcessorCache<T>;
    get groups(): ValidationGroup[];
    get clazz(): Class<T>;
    get fields(): string[];
    get noArgsInstance(): T;
    constructor(clazz: Class<T>, ...groups: ValidationGroup[]);
    isValid(state: Payload<T>): boolean;
    getDetailedErrors(state: Payload<T>): DetailedErrors<T>;
    getErrors(state: Payload<T>): Errors<T>;
    validate(payload?: Payload<T>): EntityProcessorResult<T>;
}
