import { DecoratorContext } from "../../decorators/types/DecoratorContext.type";
import { Class } from "../../types/Class.type";
import ValidationProcessor from "./ValidationProcessor";
export default class MetadataProcessor {
    #private;
    get data(): Map<string, unknown>;
    private constructor();
    getValidationProcessor<T = unknown>(key: string): ValidationProcessor<T>;
    getOrDefault<T>(key: string, defaultValueSupplier: () => T): T;
    get<T>(key: string): T;
    set<T>(key: string, value: T): T;
    read(): void;
    static fromContext(context: DecoratorContext<unknown>): MetadataProcessor;
    static fromClass<T>(clazz: Class<T>): MetadataProcessor;
}
