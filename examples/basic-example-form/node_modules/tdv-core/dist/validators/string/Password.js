"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validator_facade_1 = require("../../src/decorators/facade/validator.facade");
const ErrorMessage_1 = __importDefault(require("../../src/messages/impl/ErrorMessage"));
const decorator_utils_1 = require("../../src/utils/decorator.utils");
const regex_constants_1 = __importDefault(require("../../src/model/constants/regex.constants"));
const DEFAULT_PROPS = {
    uppercase: false,
    lowercase: true,
    numbers: false,
    specials: false,
    length: 8,
};
const PASSWORD_REGEXES = {
    uppercase: regex_constants_1.default.UPPERCASE_ANYWHERE,
    lowercase: regex_constants_1.default.LOWERCASE_ANYWHERE,
    numbers: regex_constants_1.default.NUMERIC_ANYWHERE,
    specials: regex_constants_1.default.SPECIALS_ANYWHERE,
};
function isInvalid(text, rule) {
    const matchers = text.match(PASSWORD_REGEXES[rule]);
    return matchers === null || matchers.length === 0;
}
function Password(cfg = Object.assign(Object.assign({}, DEFAULT_PROPS), { message: undefined })) {
    var _a, _b, _c, _d, _e;
    const props = typeof cfg === "string" ? Object.assign(Object.assign({}, DEFAULT_PROPS), { message: cfg }) : cfg;
    const uppercase = (_a = props.uppercase) !== null && _a !== void 0 ? _a : DEFAULT_PROPS.uppercase;
    const lowercase = (_b = props.lowercase) !== null && _b !== void 0 ? _b : DEFAULT_PROPS.lowercase;
    const numbers = (_c = props.numbers) !== null && _c !== void 0 ? _c : DEFAULT_PROPS.numbers;
    const specials = (_d = props.specials) !== null && _d !== void 0 ? _d : DEFAULT_PROPS.specials;
    const length = (_e = props.length) !== null && _e !== void 0 ? _e : DEFAULT_PROPS.length;
    const definedMessage = props.message;
    function buildConstraintViolation(message, valid = false) {
        return {
            key: "Password",
            message: !!definedMessage ? definedMessage : message,
            valid,
        };
    }
    function isValid(str) {
        if (str.length < length)
            return buildConstraintViolation(ErrorMessage_1.default.PasswordLength(length));
        if (uppercase && isInvalid(str, "uppercase"))
            return buildConstraintViolation(ErrorMessage_1.default.PasswordUppercase());
        if (lowercase && isInvalid(str, "lowercase"))
            return buildConstraintViolation(ErrorMessage_1.default.PasswordLowercase());
        if (numbers && isInvalid(str, "numbers"))
            return buildConstraintViolation(ErrorMessage_1.default.PasswordNumbers());
        if (specials && isInvalid(str, "specials"))
            return buildConstraintViolation(ErrorMessage_1.default.PasswordSpecials());
        return buildConstraintViolation("", true);
    }
    return (0, validator_facade_1.makeValidator)({
        groups: (0, decorator_utils_1.extractGroups)(props),
        isValid: (str) => isValid(str !== null && str !== void 0 ? str : ""),
    });
}
exports.default = Password;
