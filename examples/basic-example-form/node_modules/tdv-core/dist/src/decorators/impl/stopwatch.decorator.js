"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FontColor = {
    r: "\u001b[31m",
    g: "\u001b[32m",
    b: "\u001b[34m",
    _: "\u001b[0m",
};
function text(text = "", color = "_") {
    return `${FontColor[color]}${text}${FontColor._}`;
}
function logTime(clazz, methodName, start, end) {
    const date = new Date().toISOString();
    const duration = (end - start).toFixed(2);
    const className = typeof clazz === "string" ? clazz : clazz.constructor.name;
    // prettier-ignore
    console.log(text("[", 'b')
        + text(`‚è∞${date}`, 'g')
        + text("]", 'b')
        + text(` ${className}::${methodName}`)
        + text(` ${duration}ms`, 'g'));
}
function isDevelopment() {
    var _a, _b;
    // TODO: Implement for production
    // This currently just watches if the tests are running...
    return ((_b = (_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.process) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.JEST_WORKER_ID) !== undefined;
}
function stopwatch(target, context) {
    return isDevelopment()
        ? undefined
        : function (...args) {
            const start = performance.now();
            const result = target.call(this, ...args);
            const end = performance.now();
            logTime(this, String(context.name), start, end);
            return result;
        };
}
exports.default = stopwatch;
