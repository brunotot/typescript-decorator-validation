"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ClassMetadata_runtimeValue;
Object.defineProperty(exports, "__esModule", { value: true });
const class_utils_1 = require("../../utils/class.utils");
const decorator_utils_1 = require("../../utils/decorator.utils");
const object_utils_1 = require("../../utils/object.utils");
const MetadataProcessor_1 = __importDefault(require("../processor/MetadataProcessor"));
const PropertyMetadata_1 = __importDefault(require("./PropertyMetadata"));
class ClassMetadata {
    constructor(clazz, runtimeValue, ...validationGroups) {
        _ClassMetadata_runtimeValue.set(this, void 0);
        __classPrivateFieldSet(this, _ClassMetadata_runtimeValue, runtimeValue, "f");
        this._clazz = clazz;
        this._validationGroups = validationGroups;
        this._fieldNames = this.buildFieldNames();
        this._validators = this.buildValidators();
    }
    get clazz() {
        return this._clazz;
    }
    get validators() {
        return this._validators;
    }
    createInstance(state) {
        const instance = new this._clazz();
        const entries = Object.entries(state || {});
        const handleObject = (meta, key, value) => {
            const innerValidationHandler = new ClassMetadata(meta.clazz, instance === null || instance === void 0 ? void 0 : instance[key], ...this._validationGroups);
            (0, object_utils_1.safeSetter)(instance, key)(() => innerValidationHandler.createInstance(value));
        };
        const handleObjectArray = (meta, key, value) => {
            (0, object_utils_1.safeSetter)(instance, key)([]);
            const innerValidationHandler = new ClassMetadata(meta.clazz, instance === null || instance === void 0 ? void 0 : instance[key], ...this._validationGroups);
            value.forEach((v) => {
                instance[key].push(innerValidationHandler.createInstance(v));
            });
        };
        for (const [key, value] of entries) {
            const meta = new PropertyMetadata_1.default(this._clazz, key, value);
            switch (meta.type) {
                case "OBJECT": {
                    handleObject(meta, key, value);
                    break;
                }
                case "OBJECT_ARRAY": {
                    handleObjectArray(meta, key, value);
                    break;
                }
                default: {
                    (0, object_utils_1.safeSetter)(instance, key)(value);
                }
            }
        }
        return instance;
    }
    buildValidators() {
        return this._fieldNames.reduce((obj, property) => {
            var _a, _b;
            const fieldMetadata = new PropertyMetadata_1.default(this._clazz, property, (_a = __classPrivateFieldGet(this, _ClassMetadata_runtimeValue, "f")) === null || _a === void 0 ? void 0 : _a[property]);
            const innerClass = fieldMetadata.clazz;
            const validationFnMetadata = this.getValidationMetadata(property);
            const validationMetadataListByActiveGroup = validationFnMetadata.filter((meta) => (0, decorator_utils_1.isValidationGroupUnion)(this._validationGroups, meta.groups));
            return Object.assign(Object.assign({}, obj), { [property]: ["OBJECT_ARRAY", "OBJECT"].includes(fieldMetadata.type)
                    ? {
                        node: validationMetadataListByActiveGroup,
                        children: new ClassMetadata(innerClass, (_b = __classPrivateFieldGet(this, _ClassMetadata_runtimeValue, "f")) === null || _b === void 0 ? void 0 : _b[property], ...this._validationGroups).buildValidators(),
                    }
                    : validationMetadataListByActiveGroup });
        }, {});
    }
    getValidationMetadata(property) {
        return MetadataProcessor_1.default.fromClass(this._clazz).getValidationProcessor(property).node;
    }
    buildFieldNames() {
        return (0, class_utils_1.getClassFieldNames)(this._clazz);
    }
}
_ClassMetadata_runtimeValue = new WeakMap();
exports.default = ClassMetadata;
