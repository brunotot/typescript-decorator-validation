"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
var _b;
var _EntityProcessor_instances, _EntityProcessor_clazz, _EntityProcessor_groups, _EntityProcessor_metadata, _EntityProcessor_cache, _EntityProcessor_fields, _EntityProcessor_noArgsInstance, _EntityProcessor_setMetadata, _EntityProcessor_saveCache, _EntityProcessor_extractInvalidResults, _EntityProcessor_mutateValueOrUseCache, _EntityProcessor_mutateErrors, _EntityProcessor_fromCache, _EntityProcessor_tryGetCache, _EntityProcessor_isValid;
Object.defineProperty(exports, "__esModule", { value: true });
const class_utils_1 = require("../../utils/class.utils");
const decorator_utils_1 = require("../../utils/decorator.utils");
const object_utils_1 = require("../../utils/object.utils");
const ClassMetadata_1 = __importDefault(require("../metadata/ClassMetadata"));
const PropertyMetadata_1 = __importDefault(require("../metadata/PropertyMetadata"));
const MetadataProcessor_1 = __importDefault(require("./MetadataProcessor"));
(_a = (_b = Symbol).metadata) !== null && _a !== void 0 ? _a : (_b.metadata = Symbol("Symbol.metadata"));
class EntityProcessor {
    get metadata() {
        return __classPrivateFieldGet(this, _EntityProcessor_metadata, "f");
    }
    get cache() {
        return __classPrivateFieldGet(this, _EntityProcessor_cache, "f");
    }
    get groups() {
        return __classPrivateFieldGet(this, _EntityProcessor_groups, "f");
    }
    get clazz() {
        return __classPrivateFieldGet(this, _EntityProcessor_clazz, "f");
    }
    get fields() {
        return __classPrivateFieldGet(this, _EntityProcessor_fields, "f");
    }
    get noArgsInstance() {
        return __classPrivateFieldGet(this, _EntityProcessor_noArgsInstance, "f");
    }
    constructor(clazz, ...groups) {
        _EntityProcessor_instances.add(this);
        _EntityProcessor_clazz.set(this, void 0);
        _EntityProcessor_groups.set(this, void 0);
        _EntityProcessor_metadata.set(this, void 0);
        _EntityProcessor_cache.set(this, void 0);
        _EntityProcessor_fields.set(this, void 0);
        _EntityProcessor_noArgsInstance.set(this, void 0);
        __classPrivateFieldSet(this, _EntityProcessor_clazz, clazz, "f");
        __classPrivateFieldSet(this, _EntityProcessor_groups, Array.from(new Set(groups)), "f");
        __classPrivateFieldSet(this, _EntityProcessor_cache, {}, "f");
        __classPrivateFieldSet(this, _EntityProcessor_fields, (0, class_utils_1.getClassFieldNames)(clazz), "f");
        __classPrivateFieldSet(this, _EntityProcessor_noArgsInstance, new clazz(), "f");
        __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_setMetadata).call(this, __classPrivateFieldGet(this, _EntityProcessor_noArgsInstance, "f"));
    }
    isValid(state) {
        return __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_fromCache).call(this, state, "valid");
    }
    getDetailedErrors(state) {
        return __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_fromCache).call(this, state, "detailedErrors");
    }
    getErrors(state) {
        return __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_fromCache).call(this, state, "errors");
    }
    //@stopwatch
    validate(payload) {
        let errors = {};
        let detailedErrors = {};
        const state = payload !== null && payload !== void 0 ? payload : __classPrivateFieldGet(this, _EntityProcessor_noArgsInstance, "f");
        const instance = __classPrivateFieldGet(this, _EntityProcessor_metadata, "f").createInstance(state);
        const entries = Object.entries(__classPrivateFieldGet(this, _EntityProcessor_metadata, "f").validators);
        // prettier-ignore
        const collectErrorData = (key, parentData, newSimpleErrorsValue, childData) => {
            if (Array.isArray(childData)) {
                const data = { node: parentData, children: childData };
                __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_mutateErrors).call(this, key, detailedErrors, data, errors, newSimpleErrorsValue);
            }
            else {
                __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_mutateErrors).call(this, key, detailedErrors, parentData, errors, newSimpleErrorsValue);
            }
        };
        // prettier-ignore
        const handlePrimitive = (key, _, validators) => {
            const primitiveErrors = __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_extractInvalidResults).call(this, validators, instance[key], instance);
            collectErrorData(key, primitiveErrors, primitiveErrors.map((e) => e.message));
        };
        // prettier-ignore
        const handlePrimitiveArray = (key) => {
            const stateValueArray = state[key];
            const prop = MetadataProcessor_1.default.fromClass(__classPrivateFieldGet(this, _EntityProcessor_clazz, "f")).getValidationProcessor(key);
            const primitiveArrayValidators = prop.node;
            const parentValidators = __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_extractInvalidResults).call(this, prop.node, stateValueArray, state);
            const childrenValidators = (stateValueArray !== null && stateValueArray !== void 0 ? stateValueArray : []).map((v) => __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_extractInvalidResults).call(this, primitiveArrayValidators, v, state));
            collectErrorData(key, parentValidators, {
                node: parentValidators.map((e) => e.message),
                children: childrenValidators.map((e) => e.map(({ message }) => message)),
            }, childrenValidators);
        };
        // prettier-ignore
        const handleObject = (key, meta) => {
            const innerValidationHandler = new EntityProcessor(meta.clazz, ...__classPrivateFieldGet(this, _EntityProcessor_groups, "f"));
            const { detailedErrors, errors } = innerValidationHandler.validate(state[key]);
            collectErrorData(key, detailedErrors, errors);
        };
        // prettier-ignore
        const handleObjectArray = (key, meta, validators) => {
            var _a;
            const innerValidationHandler = new EntityProcessor(meta.clazz, ...__classPrivateFieldGet(this, _EntityProcessor_groups, "f"));
            const stateValueArray = ((_a = state === null || state === void 0 ? void 0 : state[key]) !== null && _a !== void 0 ? _a : []);
            const parentValidators = __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_extractInvalidResults).call(this, validators.node, stateValueArray, state);
            const childrenValidators = stateValueArray.map((value) => innerValidationHandler.validate(value));
            collectErrorData(key, parentValidators, {
                node: parentValidators.map((e) => e.message),
                children: childrenValidators.map(({ errors }) => errors),
            }, childrenValidators);
        };
        for (const [_key, _validators] of entries) {
            const validators = _validators;
            const key = _key;
            const meta = new PropertyMetadata_1.default(__classPrivateFieldGet(this, _EntityProcessor_clazz, "f"), key, state[key]);
            switch (meta.type) {
                case "OBJECT": {
                    handleObject(key, meta, validators);
                    break;
                }
                case "OBJECT_ARRAY": {
                    handleObjectArray(key, meta, validators);
                    break;
                }
                case "PRIMITIVE_ARRAY": {
                    handlePrimitiveArray(key, meta, validators);
                    break;
                }
                case "PRIMITIVE": {
                    handlePrimitive(key, meta, validators);
                    break;
                }
            }
        }
        const valid = __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_isValid).call(this, errors);
        __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_saveCache).call(this, {
            detailedErrors,
            errors,
            valid,
            state,
        });
        return {
            valid,
            detailedErrors,
            errors,
        };
    }
}
_EntityProcessor_clazz = new WeakMap(), _EntityProcessor_groups = new WeakMap(), _EntityProcessor_metadata = new WeakMap(), _EntityProcessor_cache = new WeakMap(), _EntityProcessor_fields = new WeakMap(), _EntityProcessor_noArgsInstance = new WeakMap(), _EntityProcessor_instances = new WeakSet(), _EntityProcessor_setMetadata = function _EntityProcessor_setMetadata(state) {
    __classPrivateFieldSet(this, _EntityProcessor_metadata, new ClassMetadata_1.default(__classPrivateFieldGet(this, _EntityProcessor_clazz, "f"), state, ...__classPrivateFieldGet(this, _EntityProcessor_groups, "f")), "f");
}, _EntityProcessor_saveCache = function _EntityProcessor_saveCache(cache) {
    // @ts-ignore
    Object.entries(cache).forEach(([key, value]) => (__classPrivateFieldGet(this, _EntityProcessor_cache, "f")[key] = value));
}, _EntityProcessor_extractInvalidResults = function _EntityProcessor_extractInvalidResults(validators, value, parentInstance) {
    return validators
        .filter(({ groups }) => (0, decorator_utils_1.isValidationGroupUnion)(__classPrivateFieldGet(this, _EntityProcessor_groups, "f"), groups))
        .map(({ validate }) => validate(value, parentInstance))
        .filter(({ valid }) => !valid);
}, _EntityProcessor_mutateValueOrUseCache = function _EntityProcessor_mutateValueOrUseCache(key, mutationParent, mutationValue, cacheParent) {
    const cacheValue = cacheParent === null || cacheParent === void 0 ? void 0 : cacheParent[key];
    const isNoChange = (0, object_utils_1.deepEquals)(mutationValue, cacheValue);
    mutationParent[key] = isNoChange ? cacheValue : mutationValue;
}, _EntityProcessor_mutateErrors = function _EntityProcessor_mutateErrors(key, errorsHolder, errorsValue, simpleErrorsHolder, simpleErrorsValue) {
    __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_mutateValueOrUseCache).call(this, key, errorsHolder, errorsValue, __classPrivateFieldGet(this, _EntityProcessor_cache, "f").detailedErrors);
    __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_mutateValueOrUseCache).call(this, key, simpleErrorsHolder, simpleErrorsValue, __classPrivateFieldGet(this, _EntityProcessor_cache, "f").errors);
}, _EntityProcessor_fromCache = function _EntityProcessor_fromCache(state, key) {
    return __classPrivateFieldGet(this, _EntityProcessor_instances, "m", _EntityProcessor_tryGetCache).call(this, state, __classPrivateFieldGet(this, _EntityProcessor_cache, "f")[key], () => this.validate(state)[key]);
}, _EntityProcessor_tryGetCache = function _EntityProcessor_tryGetCache(state, cacheValue, valueGetter) {
    return cacheValue === undefined || !(0, object_utils_1.deepEquals)(__classPrivateFieldGet(this, _EntityProcessor_cache, "f").state, state)
        ? valueGetter()
        : cacheValue;
}, _EntityProcessor_isValid = function _EntityProcessor_isValid(errors) {
    return !(0, object_utils_1.hasErrors)(errors);
};
exports.default = EntityProcessor;
