"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ValidationProcessor_isInitialTypeGroup, _ValidationProcessor_typeGroup;
Object.defineProperty(exports, "__esModule", { value: true });
class ValidationProcessor {
    constructor() {
        this.node = [];
        this.children = [];
        _ValidationProcessor_isInitialTypeGroup.set(this, true);
        _ValidationProcessor_typeGroup.set(this, "PRIMITIVE");
    }
    get isInitialTypeGroup() {
        return __classPrivateFieldGet(this, _ValidationProcessor_isInitialTypeGroup, "f");
    }
    get typeGroup() {
        return __classPrivateFieldGet(this, _ValidationProcessor_typeGroup, "f");
    }
    set typeGroup(typeGroup) {
        __classPrivateFieldSet(this, _ValidationProcessor_isInitialTypeGroup, false, "f");
        __classPrivateFieldSet(this, _ValidationProcessor_typeGroup, typeGroup, "f");
    }
    appendNode(validator) {
        this.node.push(validator);
    }
    appendChild(validator) {
        this.children.push(validator);
    }
}
_ValidationProcessor_isInitialTypeGroup = new WeakMap(), _ValidationProcessor_typeGroup = new WeakMap();
exports.default = ValidationProcessor;
