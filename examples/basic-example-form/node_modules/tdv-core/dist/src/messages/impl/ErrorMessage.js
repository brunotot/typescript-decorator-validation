"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const message_factory_1 = require("../message.factory");
// prettier-ignore
const ErrorMessage = {
    Alpha: () => (0, message_factory_1.t)("Alpha"),
    Alphanumeric: () => (0, message_factory_1.t)("Alphanumeric"),
    ArrayContains: (o) => (0, message_factory_1.t)("ArrayContains", JSON.stringify(o, null, 2)),
    ArrayEmpty: () => (0, message_factory_1.t)("ArrayEmpty"),
    ArraySizeExact: (exact, actual) => (0, message_factory_1.t)("ArraySizeExact", exact, actual),
    ArraySizeMax: (max, actual) => (0, message_factory_1.t)("ArraySizeMax", max, actual),
    ArraySizeMin: (min, actual) => (0, message_factory_1.t)("ArraySizeMin", min, actual),
    ArraySizeRange: (min, max, actual) => (0, message_factory_1.t)("ArraySizeRange", min, max, actual),
    ArrayUnique: () => (0, message_factory_1.t)("ArrayUnique"),
    Date: (format) => (0, message_factory_1.t)("Date", format),
    Decimal: (actual) => (0, message_factory_1.t)("Decimal", actual),
    Digits: (maxInteger, maxFraction) => (0, message_factory_1.t)("Digits", maxInteger, maxFraction),
    Email: () => (0, message_factory_1.t)("Email"),
    ExactLength: (exact) => (0, message_factory_1.t)("ExactLength", exact),
    Falsy: () => (0, message_factory_1.t)("Falsy"),
    FutureDate: (date) => (0, message_factory_1.t)("FutureDate", date === null || date === void 0 ? void 0 : date.toDateString()),
    IPAddress: () => (0, message_factory_1.t)("IPAddress"),
    Integer: (actual) => (0, message_factory_1.t)("Integer", actual),
    InvalidDigits: (maxInteger, maxFraction) => (0, message_factory_1.t)("InvalidDigits", maxInteger, maxFraction),
    JSON: () => (0, message_factory_1.t)("JSON"),
    MaxLength: (max) => (0, message_factory_1.t)("MaxLength", max),
    MinLength: (min) => (0, message_factory_1.t)("MinLength", min),
    Negative: (actual) => (0, message_factory_1.t)("Negative", actual),
    NonNegative: (actual) => (0, message_factory_1.t)("NonNegative", actual),
    NonPositive: (actual) => (0, message_factory_1.t)("NonPositive", actual),
    Numeric: () => (0, message_factory_1.t)("Numeric"),
    PasswordLength: (length) => (0, message_factory_1.t)("PasswordLength", length),
    PasswordLowercase: () => (0, message_factory_1.t)("PasswordLowercase"),
    PasswordNumbers: () => (0, message_factory_1.t)("PasswordNumbers"),
    PasswordSpecials: () => (0, message_factory_1.t)("PasswordSpecials"),
    PasswordUppercase: () => (0, message_factory_1.t)("PasswordUppercase"),
    PastDate: (date) => (0, message_factory_1.t)("PastDate", date === null || date === void 0 ? void 0 : date.toDateString()),
    Positive: (actual) => (0, message_factory_1.t)("Positive", actual),
    RangeLength: (min, max) => (0, message_factory_1.t)("RangeLength", min, max),
    Required: () => (0, message_factory_1.t)('Required'),
    Time: (locale, hour12) => (0, message_factory_1.t)("Time", locale, hour12 ? "12-hour" : "24:hour"),
    TodayDate: (date) => (0, message_factory_1.t)("TodayDate", date === null || date === void 0 ? void 0 : date.toDateString()),
    Truthy: () => (0, message_factory_1.t)("Truthy"),
    URL: () => (0, message_factory_1.t)("URL"),
    ValueMax: (value, actual) => (0, message_factory_1.t)("ValueMax", value, actual),
    ValueMin: (value, actual) => (0, message_factory_1.t)("ValueMin", value, actual),
    ValueRange: (min, max, actual) => (0, message_factory_1.t)("ValueRange", min, max, actual),
    XML: () => (0, message_factory_1.t)("XML"),
    Uppercase: () => (0, message_factory_1.t)("Uppercase"),
    Lowercase: () => (0, message_factory_1.t)("Lowercase"),
};
exports.default = ErrorMessage;
